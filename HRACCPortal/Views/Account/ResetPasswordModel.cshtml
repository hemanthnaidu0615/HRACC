@model HRACCPortal.Models.ResetPasswordModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Reset Password</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        .toast-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            min-width: 250px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateX(150%);
            transition: transform 0.5s ease-out;
            z-index: 1000;
        }

        .toast-show {
            transform: translateX(0);
        }

        .toast-success {
            background: #28a745;
        }

        .toast-error {
            background: #dc3545;
        }

        .toast-info {
            background: #17a2b8;
        }


        body {
            font-family: 'Montserrat', sans-serif;
/*            background: linear-gradient(to right, #ff7e5f, #feb47b);*/
            background-color: #f0f4f8;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0;
            color: #333;
        }

        .form-container {
            background: #ffffff;
            border-radius: 15px;
            padding: 30px;
            max-width: 450px;
            width: 100%;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15);
            text-align: center;
        }

        .form-header h2 {
            font-size: 28px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #6a11cb;
        }

        .form-group label {
            font-weight: 500;
            margin-bottom: 5px;
            display: block;
            text-align: left;
        }

        .form-group input, .form-group select {
            width: 100%;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 15px;
            outline: none;
            transition: 0.3s;
        }

            .form-group input:focus, .form-group select:focus {
                border-color: #6a11cb;
                box-shadow: 0 0 5px rgba(106, 17, 203, 0.5);
            }

        .btn-primary {
            background: linear-gradient(90deg, #6a11cb, #2575fc);
            border: none;
            border-radius: 25px;
            padding: 10px 20px;
            font-size: 16px;
            font-weight: 500;
            color: #fff;
            cursor: pointer;
            transition: transform 0.2s ease, background 0.3s ease;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                background: linear-gradient(90deg, #2575fc, #6a11cb);
            }

        .btn-secondary {
            background: transparent;
            color: #6a11cb;
            border: 2px solid #6a11cb;
            border-radius: 25px;
            padding: 8px 15px;
            font-size: 14px;
            margin: 10px;
            transition: all 0.3s ease;
        }

            .btn-secondary:hover {
                background: #6a11cb;
                color: #fff;
            }

        .btn-group {
            display: flex;
            justify-content: space-between;
            margin-top: 15px;
        }
    </style>
</head>
<body>
    <div id="toast" class="toast-notification"></div>
    <div class="form-container">
        <div class="form-header">
            <h2>Reset Your Password</h2>
        </div>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            if (Model.IsFirstLogin)
            {
                <label for="Email">Email</label>
                @Html.TextBoxFor(model => model.Email, new
                {
                    @class = "form-control",
                    placeholder = "Enter your email",
                    @readonly = Model.IsFirstLogin ? "readonly" : null
                })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            }

            if (!Model.IsFirstLogin)
            {
                <div class="form-group">
                    <label for="Email">Enter Email</label>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", placeholder = "Enter your email" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    <br />
                    <button type="button" class="btn btn-secondary" id="verifyEmailButton">Verify Email</button>
                </div>

            }
            if (Model.IsFirstLogin)
            {
                <div class="form-group">
                    <label for="SelectedQuestion1">Security Question 1</label>
                    @Html.DropDownListFor(model => model.SelectedQuestion1, new SelectList(Model.SecurityQuestions, "Id", "Question"), "Select a question", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SelectedQuestion1, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="Answer1">Answer</label>
                    @Html.TextBoxFor(model => model.Answer1, new { @class = "form-control", placeholder = "Enter your answer" })
                    @Html.ValidationMessageFor(model => model.Answer1, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="SelectedQuestion2">Security Question 2</label>
                    @Html.DropDownListFor(model => model.SelectedQuestion2, new SelectList(Model.SecurityQuestions, "Id", "Question"), "Select a question", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SelectedQuestion2, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="Answer2">Answer</label>
                    @Html.TextBoxFor(model => model.Answer2, new { @class = "form-control", placeholder = "Enter your answer" })
                    @Html.ValidationMessageFor(model => model.Answer2, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="SelectedQuestion3">Security Question 3</label>
                    @Html.DropDownListFor(model => model.SelectedQuestion3, new SelectList(Model.SecurityQuestions, "Id", "Question"), "Select a question", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SelectedQuestion3, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <label for="Answer3">Answer</label>
                    @Html.TextBoxFor(model => model.Answer3, new { @class = "form-control", placeholder = "Enter your answer" })
                    @Html.ValidationMessageFor(model => model.Answer3, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            }

            if (!Model.IsFirstLogin)
            {
                <div id="securityQuestionsSection" style="display: none;">
                    <div class="form-group">
                        <label for="SelectedQuestion1">Security Question 1</label>
                        @Html.DropDownListFor(model => model.SelectedQuestion1, new SelectList(Model.SecurityQuestions, "Id", "Question"), "Select a question", new { @class = "form-control", disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.SelectedQuestion1, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="Answer1">Answer</label>
                        @Html.TextBoxFor(model => model.Answer1, new { @class = "form-control", placeholder = "Enter your answer" })
                        @Html.ValidationMessageFor(model => model.Answer1, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="SelectedQuestion2">Security Question 2</label>
                        @Html.DropDownListFor(model => model.SelectedQuestion2, new SelectList(Model.SecurityQuestions, "Id", "Question"), "Select a question", new { @class = "form-control", disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.SelectedQuestion2, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="Answer2">Answer</label>
                        @Html.TextBoxFor(model => model.Answer2, new { @class = "form-control", placeholder = "Enter your answer" })
                        @Html.ValidationMessageFor(model => model.Answer2, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="SelectedQuestion3">Security Question 3</label>
                        @Html.DropDownListFor(model => model.SelectedQuestion3, new SelectList(Model.SecurityQuestions, "Id", "Question"), "Select a question", new { @class = "form-control", disabled = "disabled" })
                        @Html.ValidationMessageFor(model => model.SelectedQuestion3, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <label for="Answer3">Answer</label>
                        @Html.TextBoxFor(model => model.Answer3, new { @class = "form-control", placeholder = "Enter your answer" })
                        @Html.ValidationMessageFor(model => model.Answer3, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </div>

            }
            if (!Model.IsFirstLogin)
            {
                <div class="btn-group">
                    <a href="@Url.Action("Login", "Account")" class="btn btn-secondary">Back to Login</a>
                    <a href="@Url.Action("TryAnotherWay", "Account")" class="btn btn-secondary">Try Another Way</a>
                </div>
            }
        }
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="~/Content/assets/js/EmailValidation.js"></script>
    <script>
          function showToast(message, type = 'info') {
            const toast = $('#toast');
            toast.removeClass('toast-success toast-error toast-info')
                 .addClass(`toast-${type} toast-show`)
                 .text(message);

            setTimeout(() => {
                toast.removeClass('toast-show');
            }, 6000);
        }

        $(document).ready(function () {
            $('#verifyEmailButton').on('click', function () {
                const email = $('#Email').val();
                if (!email) {
                    showToast('Please enter an email address.', 'error');
                    return;
                }
    
                if (!isValidEmail(email)) {
                    showToast('Please enter a valid email address that contains a domain.', 'error');
                    return;
                }

                if (email) {
                    // AJAX call to verify the email and fetch security questions
                    $.ajax({
                        url: '/Account/VerifyEmail',
                        type: 'POST',
                        data: { email: email },
                        success: function (response) {
                            if (response.success) {
                                $('#securityQuestionsSection').show();

                                // Ensure dropdowns are disabled initially
                                $('#SelectedQuestion1').prop('disabled', true).empty();
                                $('#SelectedQuestion2').prop('disabled', true).empty();
                                $('#SelectedQuestion3').prop('disabled', true).empty();

                                // Populate dropdowns with unique questions
                                if (response.questions.length >= 3) {
                                    $('#SelectedQuestion1').append(new Option(response.questions[0].Question, response.questions[0].Id)).prop('disabled', false);
                                    $('#SelectedQuestion2').append(new Option(response.questions[1].Question, response.questions[1].Id)).prop('disabled', false);
                                    $('#SelectedQuestion3').append(new Option(response.questions[2].Question, response.questions[2].Id)).prop('disabled', false);
                                } else {
                                    alert("Not enough security questions available.");
                                }
                            } else {
                                showToast('User does not exists , If not registered ,Register Email', 'error');
                            }
                        },
                        error: function () {
                            showToast('Error verfiying Email', 'error');

                        }
                    });
                } else {
                    showToast('An error occurred. Please try again later.', 'error');

                }
            });
        });

    </script>
</body>
</html>
